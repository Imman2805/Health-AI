# -*- coding: utf-8 -*-
"""Health-Ai

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nhMEUFIluyd8Fd5g2yjhl65RDVHFoYsH
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

app.launch(share=True)

"""In the "Disease Prediction" tab, enter symptoms in the text box like this:

# Task
Add a Health Analytics Dashboard to the Gradio application.

## Data generation/loading

### Subtask:
Create or load sample health data (e.g., patient records with conditions, treatments, outcomes).

**Reasoning**:
Create a list of dictionaries to represent sample patient health data as described in the instructions.
"""

health_data = [
    {'patient_id': 1, 'condition': 'Common Cold', 'treatment': 'Rest and fluids', 'outcome': 'recovered'},
    {'patient_id': 2, 'condition': 'Migraine', 'treatment': 'Pain relievers', 'outcome': 'improving'},
    {'patient_id': 3, 'condition': 'Hypertension', 'treatment': 'Medication', 'outcome': 'no change'},
    {'patient_id': 4, 'condition': 'Diabetes', 'treatment': 'Diet and exercise', 'outcome': 'improving'},
    {'patient_id': 5, 'condition': 'Back Pain', 'treatment': 'Physical therapy', 'outcome': 'recovered'},
    {'patient_id': 6, 'condition': 'Allergies', 'treatment': 'Antihistamines', 'outcome': 'recovered'},
    {'patient_id': 7, 'condition': 'Arthritis', 'treatment': 'Pain relievers', 'outcome': 'no change'},
    {'patient_id': 8, 'condition': 'Insomnia', 'treatment': 'Sleep hygiene', 'outcome': 'improving'},
    {'patient_id': 9, 'condition': 'Depression', 'treatment': 'Therapy and medication', 'outcome': 'improving'},
    {'patient_id': 10, 'condition': 'Stomach Flu', 'treatment': 'Rest and fluids', 'outcome': 'recovered'},
]

"""## Data processing

### Subtask:
Process the data to extract relevant information for the dashboard, such as counts of conditions, treatment success rates, etc.

**Reasoning**:
Convert the health_data list into a pandas DataFrame and calculate the counts of unique medical conditions and treatment outcomes as instructed.

## Gradio interface modification

### Subtask:
Add a new tab to the Gradio app for the Health Analytics Dashboard.

**Reasoning**:
Add a new tab for the Health Analytics Dashboard within the existing Gradio tabs structure.
"""

import pandas as pd

df_health = pd.DataFrame(health_data)

condition_counts = df_health['condition'].value_counts()
outcome_counts = df_health['outcome'].value_counts()

display(condition_counts)
display(outcome_counts)

with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            pass # Content will be added in subsequent steps

app.launch(share=True)

"""# Task
Create a Gradio application with a welcome page and a Health Analytics Dashboard. The dashboard should display heart rate trends, blood pressure trends, blood glucose trends, symptom frequency for the last 90 days, a health metrics summary, and AI-generated health insights.

## Data generation/loading

### Subtask:
Create or load sample health data including heart rate, blood pressure, blood glucose, and symptom frequency over a 90-day period.

**Reasoning**:
Generate a pandas DataFrame with sample health data including heart rate, blood pressure, blood glucose, and symptom frequency over a 90-day period as instructed.
"""

import pandas as pd
import numpy as np

# Generate dates for the last 90 days
end_date = pd.to_datetime('today')
start_date = end_date - pd.Timedelta(days=89)
dates = pd.date_range(start=start_date, end=end_date, freq='D')

# Generate sample numerical data
np.random.seed(42) # for reproducibility
heart_rate = np.random.randint(60, 100, size=len(dates))
blood_pressure_sys = np.random.randint(100, 140, size=len(dates))
blood_pressure_dia = np.random.randint(60, 90, size=len(dates))
blood_pressure = [f'{s}/{d}' for s, d in zip(blood_pressure_sys, blood_pressure_dia)]
blood_glucose = np.random.uniform(70, 150, size=len(dates)).round(1)

# Generate sample symptom data with some repetition
symptoms = ['Headache', 'Fatigue', 'Cough', 'Fever', 'Sore Throat', 'Headache', 'Fatigue', 'Body Aches', 'Headache', 'Cough']
symptom_data = np.random.choice(symptoms, size=len(dates), p=[0.2, 0.2, 0.15, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05])

# Create the DataFrame
df_health_trends = pd.DataFrame({
    'Date': dates,
    'Heart Rate': heart_rate,
    'Blood Pressure': blood_pressure,
    'Blood Glucose': blood_glucose,
    'Symptom': symptom_data
})

# Display the head of the DataFrame
display(df_health_trends.head())

"""## Data processing

### Subtask:
Process the data to calculate trends for heart rate, blood pressure, blood glucose, and symptom frequency. Extract relevant health metrics and prepare data for AI-generated insights.

**Reasoning**:
Calculate rolling averages, extract and convert blood pressure, calculate symptom frequencies, compute descriptive statistics for health metrics, and prepare a summary string of these metrics for AI insights, combining multiple processing steps into a single code block as instructed.
"""

# 1. Calculate the 7-day rolling average for 'Heart Rate', 'Blood Glucose'.
df_health_trends['Heart Rate (7-Day Avg)'] = df_health_trends['Heart Rate'].rolling(window=7).mean()
df_health_trends['Blood Glucose (7-Day Avg)'] = df_health_trends['Blood Glucose'].rolling(window=7).mean()

# 2. Extract systolic and diastolic blood pressure into separate columns and convert to numeric types.
df_health_trends[['Systolic', 'Diastolic']] = df_health_trends['Blood Pressure'].str.split('/', expand=True).astype(int)

# 3. Calculate the 7-day rolling average for systolic and diastolic blood pressure.
df_health_trends['Systolic (7-Day Avg)'] = df_health_trends['Systolic'].rolling(window=7).mean()
df_health_trends['Diastolic (7-Day Avg)'] = df_health_trends['Diastolic'].rolling(window=7).mean()

# 4. Calculate the frequency of each symptom over the entire 90-day period.
symptom_frequency = df_health_trends['Symptom'].value_counts()

# 5. Calculate descriptive statistics for health metrics over the 90-day period.
health_metrics_summary = df_health_trends[['Heart Rate', 'Blood Glucose', 'Systolic', 'Diastolic']].describe()

# 6. Prepare a summary string of the calculated metrics and symptom frequencies for AI insights.
summary_string = f"""
Health Metrics Summary (Last 90 Days):

Heart Rate:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Heart Rate'].to_string()}

Blood Glucose:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Blood Glucose'].to_string()}

Systolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Systolic'].to_string()}

Diastolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Diastolic'].to_string()}

Symptom Frequency:
{symptom_frequency.to_string()}
"""

display(df_health_trends.head(10))
display(symptom_frequency)
display(health_metrics_summary)
print(summary_string)

"""## Gradio interface modification

### Subtask:
Add a new tab to the Gradio app for the enhanced Health Analytics Dashboard.

**Reasoning**:
Add a new tab for the Health Analytics Dashboard within the existing Gradio tabs structure.
"""

with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            pass # Content will be added in subsequent steps

app.launch(share=True)

"""**Reasoning**:
The previous code block failed because the `gradio` library was not imported. The `gr` object is not defined without the import. The code needs to be executed again with the `gradio` library imported.


"""

import gradio as gr

with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            pass # Content will be added in subsequent steps

app.launch(share=True)

"""**Reasoning**:
The previous code block failed because the functions `disease_prediction` and `treatment_plan` were not defined in the current execution environment. These functions were defined in a previous code cell that was not executed in the current runtime. The code needs to be executed again with the necessary functions defined.


"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            pass # Content will be added in subsequent steps

app.launch(share=True)

"""## Dashboard implementation

### Subtask:
Implement the dashboard within the new tab using Gradio components to display the processed data, including trend visualizations (e.g., plots), health metrics summary, and a section for AI-generated health insights.

**Reasoning**:
Implement the dashboard within the new tab using Gradio components to display the processed data, including trend visualizations, health metrics summary, and a section for AI-generated health insights.
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(df_health_trends, x='Date', y='Heart Rate (7-Day Avg)', title='Heart Rate Trend', x_label='Date', y_label='Heart Rate (bpm)')
            gr.Plot(df_health_trends, x='Date', y=['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'], title='Blood Pressure Trend', x_label='Date', y_label='Blood Pressure (mmHg)')
            gr.Plot(df_health_trends, x='Date', y='Blood Glucose (7-Day Avg)', title='Blood Glucose Trend', x_label='Date', y_label='Blood Glucose (mg/dL)')
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.BarPlot(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'}), x='Symptom', y='Frequency', title='Symptom Frequency', x_label='Symptom', y_label='Frequency')
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            gr.Textbox(label="Insights", lines=10)


app.launch(share=True)

"""**Reasoning**:
The previous attempt failed because `gr.Plot` does not accept `x` and `y` as keyword arguments directly in the constructor in this version of Gradio. The plotting configuration needs to be passed as the `value` argument, typically using a dictionary or a plotting library object that Gradio understands. Let's use `altair` to create the plots as it integrates well with `gr.Plot`.


"""

import altair as alt

# Create Altair charts
heart_rate_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Heart Rate (7-Day Avg)', title='Heart Rate (bpm)'),
    tooltip=['Date', 'Heart Rate (7-Day Avg)']
).properties(
    title='Heart Rate Trend'
)

blood_pressure_chart = alt.Chart(df_health_trends).transform_fold(
    ['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'],
    as_=['BP Type', 'Value']
).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Value', title='Blood Pressure (mmHg)'),
    color='BP Type',
    tooltip=['Date', 'BP Type', 'Value']
).properties(
    title='Blood Pressure Trend'
)

blood_glucose_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Blood Glucose (7-Day Avg)', title='Blood Glucose (mg/dL)'),
    tooltip=['Date', 'Blood Glucose (7-Day Avg)']
).properties(
    title='Blood Glucose Trend'
)

symptom_frequency_chart = alt.Chart(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'})).mark_bar().encode(
    x=alt.X('Symptom', title='Symptom', sort='-y'),
    y=alt.Y('Frequency', title='Frequency'),
    tooltip=['Symptom', 'Frequency']
).properties(
    title='Symptom Frequency'
)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(heart_rate_chart)
            gr.Plot(blood_pressure_chart)
            gr.Plot(blood_glucose_chart)
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.Plot(symptom_frequency_chart)
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            gr.Textbox(label="Insights", lines=10)


app.launch(share=True)

"""**Reasoning**:
The previous attempt failed because Altair couldn't determine the data type for the 'BP Type' field created by the `transform_fold`. This usually happens when Altair needs an explicit data type for fields generated by transformations. I need to explicitly specify the data type for the 'BP Type' and 'Value' fields in the blood pressure chart using `alt.Type`.


"""

import altair as alt
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)


# Create Altair charts
heart_rate_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Heart Rate (7-Day Avg)', title='Heart Rate (bpm)'),
    tooltip=['Date', 'Heart Rate (7-Day Avg)']
).properties(
    title='Heart Rate Trend'
)

blood_pressure_chart = alt.Chart(df_health_trends).transform_fold(
    ['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'],
    as_=['BP Type', 'Value']
).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Value', title='Blood Pressure (mmHg)', type='quantitative'), # Explicitly set type
    color=alt.Color('BP Type', type='nominal'), # Explicitly set type
    tooltip=['Date', 'BP Type', 'Value']
).properties(
    title='Blood Pressure Trend'
)

blood_glucose_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Blood Glucose (7-Day Avg)', title='Blood Glucose (mg/dL)'),
    tooltip=['Date', 'Blood Glucose (7-Day Avg)']
).properties(
    title='Blood Glucose Trend'
)

symptom_frequency_chart = alt.Chart(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'})).mark_bar().encode(
    x=alt.X('Symptom', title='Symptom', sort='-y'),
    y=alt.Y('Frequency', title='Frequency'),
    tooltip=['Symptom', 'Frequency']
).properties(
    title='Symptom Frequency'
)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(heart_rate_chart)
            gr.Plot(blood_pressure_chart)
            gr.Plot(blood_glucose_chart)
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.Plot(symptom_frequency_chart)
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            gr.Textbox(label="Insights", lines=10)


app.launch(share=True)

"""**Reasoning**:
The error persists even after explicitly setting the data types for 'BP Type' and 'Value' in the blood pressure chart. This suggests the issue might be with how `transform_fold` interacts with Gradio's `gr.Plot` or a subtle detail in the Altair specification. Let's try a different approach for the blood pressure chart by creating a separate, long-format DataFrame for blood pressure data before creating the Altair chart. This might provide a more explicit structure that Altair can interpret correctly.


"""

import altair as alt
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)

# Create Altair charts
heart_rate_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Heart Rate (7-Day Avg)', title='Heart Rate (bpm)'),
    tooltip=['Date', 'Heart Rate (7-Day Avg)']
).properties(
    title='Heart Rate Trend'
)

# Create a long-format DataFrame for blood pressure data
df_blood_pressure_long = df_health_trends.melt(
    id_vars=['Date'],
    value_vars=['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'],
    var_name='BP Type',
    value_name='Value'
)

blood_pressure_chart = alt.Chart(df_blood_pressure_long).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Value', title='Blood Pressure (mmHg)'),
    color='BP Type',
    tooltip=['Date', 'BP Type', 'Value']
).properties(
    title='Blood Pressure Trend'
)


blood_glucose_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Blood Glucose (7-Day Avg)', title='Blood Glucose (mg/dL)'),
    tooltip=['Date', 'Blood Glucose (7-Day Avg)']
).properties(
    title='Blood Glucose Trend'
)

symptom_frequency_chart = alt.Chart(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'})).mark_bar().encode(
    x=alt.X('Symptom', title='Symptom', sort='-y'),
    y=alt.Y('Frequency', title='Frequency'),
    tooltip=['Symptom', 'Frequency']
).properties(
    title='Symptom Frequency'
)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(heart_rate_chart)
            gr.Plot(blood_pressure_chart)
            gr.Plot(blood_glucose_chart)
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.Plot(symptom_frequency_chart)
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            gr.Textbox(label="Insights", lines=10)


app.launch(share=True)

"""## Ai-generated health insights

### Subtask:
Develop a function to generate health insights based on the processed data using the AI model.

**Reasoning**:
Define the `generate_health_insights` function as instructed, incorporating the AI model call.
"""

def generate_health_insights(summary_string):
    """
    Generates health insights based on a summary string using the AI model.

    Args:
        summary_string: A string containing the summary of health data.

    Returns:
        A string containing the AI-generated health insights.
    """
    prompt = f"Based on the following health data summary, provide a brief overview and potential insights or areas for attention. Keep the response concise.\n\nHealth Data Summary:\n{summary_string}\n\nAI Insights:"
    return generate_response(prompt, max_length=800) # Adjust max_length as needed for conciseness

# The function is defined and ready to be connected to the Gradio interface in the next step.

"""**Reasoning**:
Connect the `generate_health_insights` function to the Gradio interface and trigger it when the dashboard tab is selected or a specific button is clicked (though the instructions imply it should be displayed when the tab is accessed). Since there isn't a specific button defined for generating insights, connect it to an event that triggers when the dashboard tab is visible. A simple way is to use `app.load` or a similar mechanism, but a more direct approach for this setup is to generate the insights when the tab is created and display them.


"""

import altair as alt
import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)

def generate_health_insights(summary_string):
    """
    Generates health insights based on a summary string using the AI model.

    Args:
        summary_string: A string containing the summary of health data.

    Returns:
        A string containing the AI-generated health insights.
    """
    prompt = f"Based on the following health data summary, provide a brief overview and potential insights or areas for attention. Keep the response concise.\n\nHealth Data Summary:\n{summary_string}\n\nAI Insights:"
    return generate_response(prompt, max_length=800) # Adjust max_length as needed for conciseness


# Create Altair charts
heart_rate_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Heart Rate (7-Day Avg)', title='Heart Rate (bpm)'),
    tooltip=['Date', 'Heart Rate (7-Day Avg)']
).properties(
    title='Heart Rate Trend'
)

# Create a long-format DataFrame for blood pressure data
df_blood_pressure_long = df_health_trends.melt(
    id_vars=['Date'],
    value_vars=['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'],
    var_name='BP Type',
    value_name='Value'
)

blood_pressure_chart = alt.Chart(df_blood_pressure_long).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Value', title='Blood Pressure (mmHg)'),
    color='BP Type',
    tooltip=['Date', 'BP Type', 'Value']
).properties(
    title='Blood Pressure Trend'
)


blood_glucose_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Blood Glucose (7-Day Avg)', title='Blood Glucose (mg/dL)'),
    tooltip=['Date', 'Blood Glucose (7-Day Avg)']
).properties(
    title='Blood Glucose Trend'
)

symptom_frequency_chart = alt.Chart(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'})).mark_bar().encode(
    x=alt.X('Symptom', title='Symptom', sort='-y'),
    y=alt.Y('Frequency', title='Frequency'),
    tooltip=['Symptom', 'Frequency']
).properties(
    title='Symptom Frequency'
)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard") as dashboard_tab:
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(heart_rate_chart)
            gr.Plot(blood_pressure_chart)
            gr.Plot(blood_glucose_chart)
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.Plot(symptom_frequency_chart)
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            insights_output = gr.Textbox(label="Insights", lines=10, interactive=False)

            # Generate and display insights when the tab is selected
            dashboard_tab.select(lambda: generate_health_insights(summary_string), inputs=None, outputs=insights_output)


app.launch(share=True)

"""## Connect data and insights to dashboard

### Subtask:
Connect the processed health data, trend visualizations, health metrics summary, and AI-generated insights to the Gradio components for display.

## Summary:

### Data Analysis Key Findings

*   Sample health data for 90 days, including Heart Rate, Blood Pressure, Blood Glucose, and Symptoms, was successfully generated and stored in a pandas DataFrame.
*   Processed data includes 7-day rolling averages for Heart Rate, Blood Glucose, Systolic, and Diastolic Blood Pressure, symptom frequencies, and descriptive statistics for key metrics.
*   An AI model (ibm-granite/granite-3.2-2b-instruct) was successfully loaded and integrated for generating health insights and other medical AI assistant functionalities.
*   The Gradio application structure was successfully modified to include a "Health Analytics Dashboard" tab alongside existing "Welcome", "Disease Prediction", and "Treatment Plans" tabs.
*   Trend visualizations (Heart Rate, Blood Pressure, Blood Glucose), a symptom frequency bar plot, and a health metrics summary table were successfully created using Altair and displayed in the Gradio dashboard using `gr.Plot` and `gr.Dataframe`.
*   A function `generate_health_insights` was developed to use the AI model with the health data summary, and its output is displayed in a textbox within the dashboard upon selecting the tab.

### Insights or Next Steps

*   The AI-generated insights currently update only when the dashboard tab is selected. Consider adding a refresh button within the dashboard for users to manually regenerate insights based on potentially updated underlying data (if the data source were dynamic).
*   Enhance the AI insights prompt to encourage the model to identify potential correlations between symptoms and health metrics (e.g., high heart rate on days with reported fatigue) for more actionable insights.

## Data generation/loading

### Subtask:
Create or load sample health data including heart rate, blood pressure, blood glucose, and symptom frequency over a 90-day period.

**Reasoning**:
Generate a pandas DataFrame with sample health data including heart rate, blood pressure, blood glucose, and symptom frequency over a 90-day period as instructed.
"""

import pandas as pd
import numpy as np

# Generate dates for the last 90 days
end_date = pd.to_datetime('today')
start_date = end_date - pd.Timedelta(days=89)
dates = pd.date_range(start=start_date, end=end_date, freq='D')

# Generate sample numerical data
np.random.seed(42) # for reproducibility
heart_rate = np.random.randint(60, 100, size=len(dates))
blood_pressure_sys = np.random.randint(100, 140, size=len(dates))
blood_pressure_dia = np.random.randint(60, 90, size=len(dates))
blood_pressure = [f'{s}/{d}' for s, d in zip(blood_pressure_sys, blood_pressure_dia)]
blood_glucose = np.random.uniform(70, 150, size=len(dates)).round(1)

# Generate sample symptom data with some repetition
symptoms = ['Headache', 'Fatigue', 'Cough', 'Fever', 'Sore Throat', 'Headache', 'Fatigue', 'Body Aches', 'Headache', 'Cough']
symptom_data = np.random.choice(symptoms, size=len(dates), p=[0.2, 0.2, 0.15, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05])

# Create the DataFrame
df_health_trends = pd.DataFrame({
    'Date': dates,
    'Heart Rate': heart_rate,
    'Blood Pressure': blood_pressure,
    'Blood Glucose': blood_glucose,
    'Symptom': symptom_data
})

# Display the head of the DataFrame
display(df_health_trends.head())

"""## Data processing

### Subtask:
Process the data to calculate trends for heart rate, blood pressure, blood glucose, and symptom frequency. Extract relevant health metrics and prepare data for AI-generated insights.

**Reasoning**:
Calculate rolling averages, extract and convert blood pressure, calculate symptom frequencies, compute descriptive statistics for health metrics, and prepare a summary string of these metrics for AI insights, combining multiple processing steps into a single code block as instructed.
"""

# 1. Calculate the 7-day rolling average for 'Heart Rate', 'Blood Glucose'.
df_health_trends['Heart Rate (7-Day Avg)'] = df_health_trends['Heart Rate'].rolling(window=7).mean()
df_health_trends['Blood Glucose (7-Day Avg)'] = df_health_trends['Blood Glucose'].rolling(window=7).mean()

# 2. Extract systolic and diastolic blood pressure into separate columns and convert to numeric types.
df_health_trends[['Systolic', 'Diastolic']] = df_health_trends['Blood Pressure'].str.split('/', expand=True).astype(int)

# 3. Calculate the 7-day rolling average for systolic and diastolic blood pressure.
df_health_trends['Systolic (7-Day Avg)'] = df_health_trends['Systolic'].rolling(window=7).mean()
df_health_trends['Diastolic (7-Day Avg)'] = df_health_trends['Diastolic'].rolling(window=7).mean()

# 4. Calculate the frequency of each symptom over the entire 90-day period.
symptom_frequency = df_health_trends['Symptom'].value_counts()

# 5. Calculate descriptive statistics for health metrics over the 90-day period.
health_metrics_summary = df_health_trends[['Heart Rate', 'Blood Glucose', 'Systolic', 'Diastolic']].describe()

# 6. Prepare a summary string of the calculated metrics and symptom frequencies for AI insights.
summary_string = f"""
Health Metrics Summary (Last 90 Days):

Heart Rate:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Heart Rate'].to_string()}

Blood Glucose:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Blood Glucose'].to_string()}

Systolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Systolic'].to_string()}

Diastolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Diastolic'].to_string()}

Symptom Frequency:
{symptom_frequency.to_string()}
"""

display(df_health_trends.head(10))
display(symptom_frequency)
display(health_metrics_summary)
print(summary_string)

"""## Gradio interface modification

### Subtask:
Add a new tab to the Gradio app for the enhanced Health Analytics Dashboard.

**Reasoning**:
Add a new tab for the Health Analytics Dashboard within the existing Gradio tabs structure.
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard"):
            pass # Content will be added in subsequent steps

app.launch(share=True)

"""## Dashboard implementation

### Subtask:
Implement the dashboard within the new tab using Gradio components to display the processed data, including trend visualizations (e.g., plots), health metrics summary, and a section for AI-generated health insights.

**Reasoning**:
Implement the dashboard within the new tab using Gradio components to display the processed data, including trend visualizations, health metrics summary, and a section for AI-generated health insights.
"""

import altair as alt
import gradio as gr
import torch
import pandas as pd
import numpy as np
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def disease_prediction(symptoms):
    prompt = f"Based on the following symptoms, provide possible medical conditions and general medication suggestions. Always emphasize the importance of consulting a doctor for proper diagnosis.\n\nSymptoms: {symptoms}\n\nPossible conditions and recommendations:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**\n\nAnalysis:"
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Generate personalized treatment suggestions for the following patient information. Include home remedies and general medication guidelines.\n\nMedical Condition: {condition}\nAge: {age}\nGender: {gender}\nMedical History: {medical_history}\n\nPersonalized treatment plan including home remedies and medication guidelines:\n\n**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**\n\nTreatment Plan:"
    return generate_response(prompt, max_length=1200)

def generate_health_insights(summary_string):
    """
    Generates health insights based on a summary string using the AI model.

    Args:
        summary_string: A string containing the summary of health data.

    Returns:
        A string containing the AI-generated health insights.
    """
    prompt = f"Based on the following health data summary, provide a brief overview and potential insights or areas for attention. Keep the response concise.\n\nHealth Data Summary:\n{summary_string}\n\nAI Insights:"
    return generate_response(prompt, max_length=800) # Adjust max_length as needed for conciseness

# --- Data Generation and Processing ---
# Generate dates for the last 90 days
end_date = pd.to_datetime('today')
start_date = end_date - pd.Timedelta(days=89)
dates = pd.date_range(start=start_date, end=end_date, freq='D')

# Generate sample numerical data
np.random.seed(42) # for reproducibility
heart_rate = np.random.randint(60, 100, size=len(dates))
blood_pressure_sys = np.random.randint(100, 140, size=len(dates))
blood_pressure_dia = np.random.randint(60, 90, size=len(dates))
blood_pressure = [f'{s}/{d}' for s, d in zip(blood_pressure_sys, blood_pressure_dia)]
blood_glucose = np.random.uniform(70, 150, size=len(dates)).round(1)

# Generate sample symptom data with some repetition
symptoms = ['Headache', 'Fatigue', 'Cough', 'Fever', 'Sore Throat', 'Headache', 'Fatigue', 'Body Aches', 'Headache', 'Cough']
symptom_data = np.random.choice(symptoms, size=len(dates), p=[0.2, 0.2, 0.15, 0.1, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05])

# Create the DataFrame
df_health_trends = pd.DataFrame({
    'Date': dates,
    'Heart Rate': heart_rate,
    'Blood Pressure': blood_pressure,
    'Blood Glucose': blood_glucose,
    'Symptom': symptom_data
})

# Calculate the 7-day rolling average for 'Heart Rate', 'Blood Glucose'.
df_health_trends['Heart Rate (7-Day Avg)'] = df_health_trends['Heart Rate'].rolling(window=7).mean()
df_health_trends['Blood Glucose (7-Day Avg)'] = df_health_trends['Blood Glucose'].rolling(window=7).mean()

# Extract systolic and diastolic blood pressure into separate columns and convert to numeric types.
df_health_trends[['Systolic', 'Diastolic']] = df_health_trends['Blood Pressure'].str.split('/', expand=True).astype(int)

# Calculate the 7-day rolling average for systolic and diastolic blood pressure.
df_health_trends['Systolic (7-Day Avg)'] = df_health_trends['Systolic'].rolling(window=7).mean()
df_health_trends['Diastolic (7-Day Avg)'] = df_health_trends['Diastolic'].rolling(window=7).mean()

# Calculate the frequency of each symptom over the entire 90-day period.
symptom_frequency = df_health_trends['Symptom'].value_counts()

# Calculate descriptive statistics for health metrics over the 90-day period.
health_metrics_summary = df_health_trends[['Heart Rate', 'Blood Glucose', 'Systolic', 'Diastolic']].describe()

# Prepare a summary string of the calculated metrics and symptom frequencies for AI insights.
summary_string = f"""
Health Metrics Summary (Last 90 Days):

Heart Rate:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Heart Rate'].to_string()}

Blood Glucose:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Blood Glucose'].to_string()}

Systolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Systolic'].to_string()}

Diastolic Blood Pressure:
{health_metrics_summary.loc[['mean', 'std', 'min', 'max'], 'Diastolic'].to_string()}

Symptom Frequency:
{symptom_frequency.to_string()}
"""
# --- End Data Generation and Processing ---


# Create Altair charts
heart_rate_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Heart Rate (7-Day Avg)', title='Heart Rate (bpm)'),
    tooltip=['Date', 'Heart Rate (7-Day Avg)']
).properties(
    title='Heart Rate Trend'
)

# Create a long-format DataFrame for blood pressure data
df_blood_pressure_long = df_health_trends.melt(
    id_vars=['Date'],
    value_vars=['Systolic (7-Day Avg)', 'Diastolic (7-Day Avg)'],
    var_name='BP Type',
    value_name='Value'
)

blood_pressure_chart = alt.Chart(df_blood_pressure_long).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Value', title='Blood Pressure (mmHg)'),
    color='BP Type',
    tooltip=['Date', 'BP Type', 'Value']
).properties(
    title='Blood Pressure Trend'
)


blood_glucose_chart = alt.Chart(df_health_trends).mark_line().encode(
    x=alt.X('Date', title='Date'),
    y=alt.Y('Blood Glucose (7-Day Avg)', title='Blood Glucose (mg/dL)'),
    tooltip=['Date', 'Blood Glucose (7-Day Avg)']
).properties(
    title='Blood Glucose Trend'
)

symptom_frequency_chart = alt.Chart(symptom_frequency.reset_index().rename(columns={'index': 'Symptom', 'count': 'Frequency'})).mark_bar().encode(
    x=alt.X('Symptom', title='Symptom', sort='-y'),
    y=alt.Y('Frequency', title='Frequency'),
    tooltip=['Symptom', 'Frequency']
).properties(
    title='Symptom Frequency'
)


with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        with gr.TabItem("Welcome"):
            gr.Markdown("""
            ## Welcome to the Medical AI Assistant!

            This application provides informational assistance regarding potential medical conditions based on symptoms and offers personalized treatment suggestions.

            **Please remember:**
            * This tool is for informational purposes only and should not be considered a substitute for professional medical advice.
            * Always consult a qualified healthcare professional for any health concerns or before making any decisions related to your health or treatment.

            Navigate through the tabs above to explore the different functionalities:
            * **Disease Prediction:** Enter your symptoms to get a list of possible medical conditions and general recommendations.
            * **Treatment Plans:** Provide information about a medical condition and patient details to receive personalized treatment suggestions.
            """)
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Textbox(label="Possible Conditions & Recommendations", lines=20)

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Textbox(label="Personalized Treatment Plan", lines=20)

            plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input, history_input], outputs=plan_output)

        with gr.TabItem("Health Analytics Dashboard") as dashboard_tab:
            gr.Markdown("## Health Analytics Overview")
            gr.Markdown("### Health Trends (Last 90 Days)")
            gr.Plot(heart_rate_chart)
            gr.Plot(blood_pressure_chart)
            gr.Plot(blood_glucose_chart)
            gr.Markdown("### Symptom Frequency (Last 90 Days)")
            gr.Plot(symptom_frequency_chart)
            gr.Markdown("### Health Metrics Summary")
            gr.Dataframe(health_metrics_summary)
            gr.Markdown("### AI-Generated Health Insights")
            insights_output = gr.Textbox(label="Insights", lines=10, interactive=False)

            # Generate and display insights when the tab is selected
            dashboard_tab.select(lambda: generate_health_insights(summary_string), inputs=None, outputs=insights_output)

app.launch(share=True)